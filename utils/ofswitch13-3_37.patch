diff --git a/build-support/custom-modules/ns3-configtable.cmake b/build-support/custom-modules/ns3-configtable.cmake
index 3b972d8fe..3d2ec356a 100644
--- a/build-support/custom-modules/ns3-configtable.cmake
+++ b/build-support/custom-modules/ns3-configtable.cmake
@@ -155,6 +155,9 @@ macro(write_configtable)
   string(APPEND out "ns-3 Click Integration        : ")
   check_on_or_off("ON" "${NS3_CLICK}")
 
+  string(APPEND out "ns-3 OFSwitch13 Integration   : ")
+  check_on_or_off("ON" "${NS3_OFSWITCH13}")
+
   string(APPEND out "ns-3 OpenFlow Integration     : ")
   check_on_or_off("ON" "${NS3_OPENFLOW}")
 
diff --git a/src/csma/model/csma-net-device.cc b/src/csma/model/csma-net-device.cc
index 9180e6c14..48932222d 100644
--- a/src/csma/model/csma-net-device.cc
+++ b/src/csma/model/csma-net-device.cc
@@ -806,6 +806,34 @@ CsmaNetDevice::Receive(Ptr<Packet> packet, Ptr<CsmaNetDevice> senderDevice)
         packetType = PACKET_OTHERHOST;
     }
 
+    //
+    // Check if this device is configure as an OpenFlow switch port.
+    //
+    if (!m_openFlowRxCallback.IsNull())
+    {
+        // For all kinds of packet we receive, we hit the promiscuous sniffer
+        // hook. If the packet is addressed to this device (which is not supposed
+        // to happen in normal situations), we also hit the non-promiscuous
+        // sniffer hook, but in both cases we don't forward the packet up the
+        // stack.
+        m_promiscSnifferTrace(originalPacket);
+        if (packetType != PACKET_OTHERHOST)
+        {
+            m_snifferTrace(originalPacket);
+        }
+
+        // We forward the original packet (which includes the EthernetHeader) to
+        // the OpenFlow receive callback for all kinds of packetType we receive
+        // (broadcast, multicast, host or other host).
+        m_openFlowRxCallback(this,
+                             originalPacket,
+                             protocol,
+                             header.GetSource(),
+                             header.GetDestination(),
+                             packetType);
+        return;
+    }
+
     //
     // For all kinds of packetType we receive, we hit the promiscuous sniffer
     // hook and pass a copy up to the promiscuous callback.  Pass a copy to
@@ -1024,6 +1052,13 @@ CsmaNetDevice::GetNode() const
     return m_node;
 }
 
+void
+CsmaNetDevice::SetOpenFlowReceiveCallback(NetDevice::PromiscReceiveCallback cb)
+{
+    NS_LOG_FUNCTION(&cb);
+    m_openFlowRxCallback = cb;
+}
+
 void
 CsmaNetDevice::SetNode(Ptr<Node> node)
 {
diff --git a/src/csma/model/csma-net-device.h b/src/csma/model/csma-net-device.h
index 4c7af46c8..ca24e0d87 100644
--- a/src/csma/model/csma-net-device.h
+++ b/src/csma/model/csma-net-device.h
@@ -312,6 +312,14 @@ class CsmaNetDevice : public NetDevice
      */
     bool NeedsArp() const override;
 
+    /**
+     * Set the callback used to notify the OpenFlow when a packet has been
+     * received by this device.
+     *
+     * \param cb The callback.
+     */
+    void SetOpenFlowReceiveCallback(NetDevice::PromiscReceiveCallback cb);
+
     /**
      * Set the callback to be used to notify higher layers when a packet has been
      * received.
@@ -692,6 +700,11 @@ class CsmaNetDevice : public NetDevice
      */
     Mac48Address m_address;
 
+    /**
+     * The OpenFlow receive callback.
+     */
+    NetDevice::PromiscReceiveCallback m_openFlowRxCallback;
+
     /**
      * The callback used to notify higher layers that a packet has been received.
      */
diff --git a/src/virtual-net-device/model/virtual-net-device.cc b/src/virtual-net-device/model/virtual-net-device.cc
index 6b19ef1d7..b6122ac71 100644
--- a/src/virtual-net-device/model/virtual-net-device.cc
+++ b/src/virtual-net-device/model/virtual-net-device.cc
@@ -142,6 +142,29 @@ VirtualNetDevice::Receive(Ptr<Packet> packet,
                           const Address& destination,
                           PacketType packetType)
 {
+    //
+    // Check if this device is configure as an OpenFlow switch port.
+    //
+    if (!m_openFlowRxCallback.IsNull())
+    {
+        // For all kinds of packetType we receive, we hit the promiscuous sniffer
+        // hook. If the packet is addressed to this device (which is not supposed
+        // to happen in normal situations), we also hit the non-promiscuous
+        // sniffer hook, but in both cases we don't forward the packet up the
+        // stack.
+        m_promiscSnifferTrace(packet);
+        if (packetType != PACKET_OTHERHOST)
+        {
+            m_snifferTrace(packet);
+        }
+
+        // We then forward the original packet to the OpenFlow receive callback
+        // for all kinds of packetType we receive (broadcast, multicast, host or
+        // other host).
+        m_openFlowRxCallback(this, packet, protocol, source, destination, packetType);
+        return true;
+    }
+
     //
     // For all kinds of packetType we receive, we hit the promiscuous sniffer
     // hook and pass a copy up to the promiscuous callback.  Pass a copy to
@@ -319,4 +342,11 @@ VirtualNetDevice::IsBridge() const
     return false;
 }
 
+void
+VirtualNetDevice::SetOpenFlowReceiveCallback(NetDevice::PromiscReceiveCallback cb)
+{
+    NS_LOG_FUNCTION(&cb);
+    m_openFlowRxCallback = cb;
+}
+
 } // namespace ns3
diff --git a/src/virtual-net-device/model/virtual-net-device.h b/src/virtual-net-device/model/virtual-net-device.h
index 66718596a..c0eb0c468 100644
--- a/src/virtual-net-device/model/virtual-net-device.h
+++ b/src/virtual-net-device/model/virtual-net-device.h
@@ -153,6 +153,14 @@ class VirtualNetDevice : public NetDevice
     bool SupportsSendFrom() const override;
     bool IsBridge() const override;
 
+    /**
+     * Set the callback used to notify the OpenFlow when a packet has been
+     * received by this device.
+     *
+     * \param cb The OpenFlow receive callback.
+     */
+    void SetOpenFlowReceiveCallback(NetDevice::PromiscReceiveCallback cb);
+
   protected:
     void DoDispose() override;
 
@@ -173,6 +181,9 @@ class VirtualNetDevice : public NetDevice
     bool m_needsArp;                                         //!< True if the device needs ARP
     bool m_supportsSendFrom; //!< True if the device supports SendFrm
     bool m_isPointToPoint;   //!< True if the device is a PointToPoint type device
+
+    /** The OpenFlow receive callback. */
+    NetDevice::PromiscReceiveCallback m_openFlowRxCallback;
 };
 
 } // namespace ns3
